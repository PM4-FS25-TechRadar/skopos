name: CI for Skopos

on:
  push:
    branches:
      - main
      - ci/deployment-tags
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: SKOPOS Checkout code
      uses: actions/checkout@v4

    - name: SKOPOS Set up JDK 
      uses: actions/setup-java@v4
      with:
        java-version: '23'
        distribution: 'temurin' 
        cache: 'maven'

    - name: SKOPOS Set up Docker Build
      uses: docker/setup-buildx-action@v2

    - name: SKOPOS Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /var/lib/docker
        key: docker-cache-${{ runner.os }}-${{ github.ref }}
        restore-keys: |
          docker-cache-${{ runner.os }}-

    - name: SKOPOS Enable Testcontainers Reuse
      run: echo "testcontainers.reuse.enable=true" > ~/.testcontainers.properties

    - name: SKOPOS Run tests with Maven
      run: mvn package

    - name: SKOPOS Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: target/

    - name: SKOPOS Upload Dockerfiles
      uses: actions/upload-artifact@v4
      with:
        name: dockerfiles
        path: src/main/docker/

  docker-build-and-push:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:

    - name: SKOPOS Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: target

    - name: SKOPOS Download Dockerfiles
      uses: actions/download-artifact@v4
      with:
        name: dockerfiles
        path: src/main/docker

    - name: SKOPOS Set up Docker Build
      uses: docker/setup-buildx-action@v2

    - name: Create release
      id: create_release_id
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.next.outputs.version }}
        release_name: Release ${{ steps.next.outputs.version }}

    - name: SKOPOS Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: downcase REPO
      run: |
        echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

    - name: Set image tag from commit SHA
      run: echo "IMAGE_TAG=${GITHUB_SHA::7}" >> $GITHUB_ENV

    - name: SKOPOS Build and push Docker image
      run: |
        docker build -f src/main/docker/Dockerfile.jvm -t ghcr.io/${REPO}/skopos:${{ steps.next.outputs.version }} .
        docker push ghcr.io/${REPO}/skopos:${{ steps.next.outputs.version }}

    - name: print pwd
      run: pwd

    - name: print ls
      run: ls

    - name: print tree
      run: tree

    - name: Render deployment.yaml with tag
      run: |
        envsubst < operations/radar-deploy.yaml.templ > operations/radar-deploy.yaml
      env:
        IMAGE_TAG: ${{ env.IMAGE_TAG }}